import React, { useState, useEffect } from 'react';

const Files = () => {
  const [file, setFile] = useState(null);
  const [comment, setComment] = useState('');
  const [files, setFiles] = useState([]);

  const getToken = () => localStorage.getItem('access');

  const checkAuth = (response) => {
    if ([401, 403].includes(response.status)) {
      alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.');
      localStorage.removeItem('access');
      localStorage.removeItem('refresh');
      window.location.href = '/login';
      return false;
    }
    return true;
  };

  const fetchFiles = async () => {
    const token = getToken();
    const response = await fetch('http://127.0.0.1:8000/api/files/', {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (!checkAuth(response)) return;

    if (response.ok) {
      const data = await response.json();
      setFiles(data);
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤');
    }
  };

  useEffect(() => {
    fetchFiles();
  }, []);

  const handleUpload = async (e) => {
    e.preventDefault();
    if (!file) return alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');

    const formData = new FormData();
    formData.append('file', file);
    formData.append('comment', comment);

    const token = getToken();

    const response = await fetch('http://127.0.0.1:8000/api/files/', {
      method: 'POST',
      headers: { Authorization: `Bearer ${token}` },
      body: formData,
    });

    if (!checkAuth(response)) return;

    if (response.ok) {
      alert('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
      setFile(null);
      setComment('');
      fetchFiles();
    } else {
      const result = await response.json();
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + (result.file || result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

 const handleDownload = async (id) => {
  const token = localStorage.getItem('access');
  const response = await fetch(`http://127.0.0.1:8000/api/files/${id}/download/`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  if (response.ok) {
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', '');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } else {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
  }
};




  const handleDelete = async (id) => {
    const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?');
    if (!confirmed) return;

    const token = getToken();
    const response = await fetch(`http://127.0.0.1:8000/api/files/${id}/`, {
      method: 'DELETE',
      headers: { Authorization: `Bearer ${token}` },
    });

    if (!checkAuth(response)) return;

    if (response.ok) {
      fetchFiles();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
  };

  const handleUpdate = async (id, newName, newComment) => {
    const token = getToken();
    const response = await fetch(`http://127.0.0.1:8000/api/files/${id}/`, {
      method: 'PATCH',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ original_name: newName, comment: newComment }),
    });

    if (!checkAuth(response)) return;

    if (response.ok) {
      fetchFiles();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞');
    }
  };

  const handleCopyLink = (uuid) => {
    const link = `http://127.0.0.1:8000/api/files/shared/${uuid}/`;
    navigator.clipboard.writeText(link);
    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  return (
    <div>
      <h2>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤</h2>

      <form onSubmit={handleUpload}>
        <input type="file" onChange={(e) => setFile(e.target.files[0])} required />
        <br />
        <input
          type="text"
          placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
        />
        <br />
        <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
      </form>

      <ul>
        {files.map((f) => (
          <li key={f.id} style={{ marginTop: '1em' }}>
            <strong>{f.original_name || f.file}</strong> ({f.size} –±–∞–π—Ç)
            <br />
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {f.comment || '‚Äî'}
            <br />
            <button onClick={() => handleDownload(f.id, f.original_name)}>üì• –°–∫–∞—á–∞—Ç—å</button>{' '}
            <button onClick={() => handleDelete(f.id)}>üóë –£–¥–∞–ª–∏—Ç—å</button>{' '}
            <button
              onClick={() => {
                const newName = prompt('–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', f.original_name);
                const newComment = prompt('–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', f.comment);
                if (newName !== null && newComment !== null) {
                  handleUpdate(f.id, newName, newComment);
                }
              }}
            >
              ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
            </button>{' '}
            <button onClick={() => handleCopyLink(f.special_link)}>üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Files;








